---
AWSTemplateFormatVersion: 2010-09-09
Description: Create anchore-engine ECS infrastructure

Mappings:
  AWSRegionToAMI:
    ap-south-1:
      AMI: ami-c7072aa8
    eu-west-3:
      AMI: ami-ca75c4b7
    eu-west-2:
      AMI: ami-3622cf51
    eu-west-1:
      AMI: ami-c91624b0
    ap-northeast-2:
      AMI: ami-7c69c112
    ap-northeast-1:
      AMI: ami-f3f8098c
    sa-east-1:
      AMI: ami-a1e2becd
    ca-central-1:
      AMI: ami-da6cecbe
    ap-southeast-1:
      AMI: ami-b75a6acb
    ap-southeast-2:
      AMI: ami-bc04d5de
    eu-central-1:
      AMI: ami-10e6c8fb
    us-east-1:
      AMI: ami-5253c32d
    us-east-2:
      AMI: ami-956e52f0
    us-west-1:
      AMI: ami-6b81980b
    us-west-2:
      AMI: ami-d2f489aa

Parameters:
  InstanceType:
    Type: String

Resources:
  VPC:
    Type: AWS::EC2::VPC
    Properties:
      CidrBlock: 10.0.0.0/24
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  Subnet1:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.0/25
      AvailabilityZone: !Select [ 0, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  Subnet2:
    Type: AWS::EC2::Subnet
    Properties:
      VpcId: !Ref VPC
      MapPublicIpOnLaunch: true
      CidrBlock: 10.0.0.128/25
      AvailabilityZone: !Select [ 1, !GetAZs ]
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  InternetGateway:
    Type: AWS::EC2::InternetGateway
    Properties:
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  GatewayAttachment:
    Type: AWS::EC2::VPCGatewayAttachment
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref VPC

  RouteIGW:
    Type: AWS::EC2::Route
    Properties:
      RouteTableId: !Ref RouteTable
      DestinationCidrBlock: 0.0.0.0/0
      GatewayId: !Ref InternetGateway

  RouteTable:
    Type: AWS::EC2::RouteTable
    Properties:
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  RouteTableAssociation1:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet1
      RouteTableId: !Ref RouteTable

  RouteTableAssociation2:
    Type: AWS::EC2::SubnetRouteTableAssociation
    Properties:
      SubnetId: !Ref Subnet2
      RouteTableId: !Ref RouteTable

  ECSCluster:
    Type: AWS::ECS::Cluster

  ALB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Scheme: internet-facing
      SecurityGroups:
        - !GetAtt SecurityGroup.GroupId
      Subnets:
        - !Ref Subnet1
        - !Ref Subnet2
      LoadBalancerAttributes:
        - Key: idle_timeout.timeout_seconds
          Value: 600
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: anchore-engine security group
      VpcId: !Ref VPC
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  IngressRuleApi:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8228
      ToPort: 8228
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt SecurityGroup.GroupId

  IngressRuleKubernetes:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8338
      ToPort: 8338
      CidrIp: 0.0.0.0/0
      GroupId: !GetAtt SecurityGroup.GroupId

  IngressRuleCatalog:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8082
      ToPort: 8082
      CidrIp: 0.0.0.0/0
      # SourceSecurityGroupId: !GetAtt ECSHostSecurityGroup.GroupId
      GroupId: !GetAtt SecurityGroup.GroupId

  IngressRuleSimpleQueue:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8083
      ToPort: 8083
      CidrIp: 0.0.0.0/0
      # SourceSecurityGroupId: !GetAtt ECSHostSecurityGroup.GroupId
      GroupId: !GetAtt SecurityGroup.GroupId

  IngressRulePolicyEngine:
    Type: AWS::EC2::SecurityGroupIngress
    Properties:
      IpProtocol: tcp
      FromPort: 8087
      ToPort: 8087
      CidrIp: 0.0.0.0/0
      # SourceSecurityGroupId: !GetAtt ECSHostSecurityGroup.GroupId
      GroupId: !GetAtt SecurityGroup.GroupId

  ECSHostSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      VpcId: !Ref VPC
      GroupDescription: Access to the ECS hosts and the tasks/containers that run on them
      SecurityGroupIngress:
        # Only allow inbound access to ECS from the ELB
        - SourceSecurityGroupId: !Ref SecurityGroup
          IpProtocol: -1
      Tags:
        - Key: Name
          Value: !Ref AWS::StackName

  ECSRole:
    Type: AWS::IAM::Role
    Properties:
      Path: /
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - ec2.amazonaws.com
            Action:
              - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AmazonEC2ContainerServiceforEC2Role

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref ECSRole

  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier: [!Ref 'Subnet1', !Ref 'Subnet2']
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 0
      MaxSize: 1
      DesiredCapacity: 1
      Tags:
        - Key: Name
          Value: !Sub ${AWS::StackName} - ECS Host
          PropagateAtLaunch: true
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 0
        MaxBatchSize: 1
        PauseTime: PT15M
        WaitOnResourceSignals: true

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
              command: !Sub echo ECS_CLUSTER=${ECSCluster} > /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
            "/opt/anchore/config.yaml.example":
              content: |
                # Anchore Service Configuration File

                # General system-wide configuration options, these should not need to
                # be altered for basic operation
                #
                service_dir: '/local_anchore_config'
                # tmp_dir: '/tmp'
                # log_level: 'DEBUG'
                #
                allow_awsecr_iam_auto: True
                cleanup_images: True
                # docker_conn: 'unix://var/run/docker.sock'
                # docker_conn_timeout: 600
                #
                #
                log_level: 'INFO'
                # log_level: 'DEBUG'

                # Leave the host_id unset so it will be auto-generated (a uuid) on container startup and tied to the container's lifecycle
                #host_id: ${ANCHORE_HOST_ID}
                internal_ssl_verify: False

                # Uncomment if you have a local endpoint that can accept
                # notifications from the anchore-engine, as configured below
                #
                #webhooks:
                #  webhook_user: 'user'
                #  webhook_pass: 'pass'
                #  ssl_verify: False
                #  general:
                #    url: 'http://localhost:9090/general/<notification_type>/<userId>'
                #  policy_eval:
                #    url: 'http://localhost:9090/policy_eval/<userId>'
                #    webhook_user: 'mehuser'
                #    webhook_pass: 'mehpass'
                ## special webhook for FATAL service events - system will store in DB if not enabled here
                #  # error_event:
                #  #   url: 'http://localhost:9090/error_event/'
                #  #

                #
                # A feeds section is available for override, but shouldn't be
                # needed. By default, the 'admin' credentials are used if present,
                # otherwise anonymous access for feed sync is used

                #feeds:
                #  selective_sync:
                #    # If enabled only sync specific feeds instead of all.
                #    enabled: True
                #    feeds:
                #      vulnerabilities: True
                #      # Warning: enabling the package sync causes the service to require much
                #      #   more memory to do process the significant data volume. We recommend at least 4GB available for the container
                #      packages: False
                #  anonymous_user_username: anon@ancho.re
                #  anonymous_user_password: pbiU2RYZ2XrmYQ
                #  url: 'https://ancho.re/v1/service/feeds'
                #  client_url: 'https://ancho.re/v1/account/users'
                #  token_url: 'https://ancho.re/oauth/token'
                #  connection_timeout_seconds: 3
                #  read_timeout_seconds: 60

                credentials:
                  users:
                     admin:
                       password: foobar
                       email: 'me@example.com'
                       external_service_auths:
                       #  anchoreio:
                       #    anchorecli:
                       #      auth: 'myanchoreiouser:myanchoreiopass'
                       #auto_policy_sync: True

                  database:
                    db_connect: "postgresql+pg8000://${ANCHORE_DB_USER}:${ANCHORE_DB_PASSWORD}@${ANCHORE_DB_POSTGRESQL_SERVICE_HOST}:${ANCHORE_DB_POSTGRESQL_SERVICE_PORT}/${ANCHORE_DB_NAME}"
                    db_connect_args:
                      timeout: 120
                      ssl: False
                    db_pool_size: 30
                    db_pool_max_overflow: 100

                services:
                  apiext:
                    enabled: True
                    require_auth: True
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8228
                    # ssl_enable: True
                  kubernetes_webhook:
                    enabled: True
                    require_auth: False
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8338
                    # ssl_enable: True
                  catalog:
                    enabled: True
                    require_auth: True
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8082
                    use_db: True
                    cycle_timer_seconds: '1'
                    cycle_timers:
                      image_watcher: 3600
                      policy_eval: 3600
                      feed_sync: 14400
                      analyzer_queue: 1
                      notifications: 30
                      service_watcher: 15
                      policy_bundle_sync: 300
                  simplequeue:
                    enabled: True
                    require_auth: True
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8083
                  analyzer:
                    enabled: True
                    cycle_timer_seconds: '1'
                    analyzer_driver: 'nodocker'
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8084
                  policy_engine:
                    enabled: True
                    require_auth: True
                    endpoint_hostname: ${ANCHORE_ENGINE_SERVICE_SERVICE_HOST}
                    listen: '0.0.0.0'
                    port: 8087
                    # ssl_enable: True
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                  - /etc/cfn/cfn-hup.conf
                  - /etc/cfn/hooks.d/cfn-auto-reloader.conf
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: !FindInMap [ AWSRegionToAMI, !Ref "AWS::Region", AMI ]
      InstanceType: !Ref InstanceType
      SecurityGroups:
        - !Ref ECSHostSecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup

Outputs:
  ECSCluster:
    Value: !Ref ECSCluster

  VPC:
    Value: !Ref VPC

  Subnet1:
    Value: !Ref Subnet1

  Subnet2:
    Value: !Ref Subnet2

  ALB:
    Value: !Ref ALB

  ALBCNAME:
    Value: !GetAtt ALB.DNSName

  SecurityGroup:
    Value: !GetAtt SecurityGroup.GroupId

  ECSHostSecurityGroup:
    Value: !GetAtt ECSHostSecurityGroup.GroupId
